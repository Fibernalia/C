from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import importKey
from fractions import gcd
from glob import glob

#openssl rsa -in daniel.garcia.romero_pubkeyRSA_RW.pem -pubin -text -modulus > salida.txt
#Modulus=96C326607D51A67E4A2C586A067163501E4BBA1E8CB1825AE9EDEEDAD6523F798A8F2CB329AE2F9FD5576FDF52206477B2592C36C2B7B1BE3E7B302EBBD892164E435AF5FB5B9B077DFEA0531ADB8026A28D003C087DEB2B7B6BCEA73923884989ECC0432B2A694630DC210A2397D97B5FC4E6C05639B1BA66621E138C54DF4D9BC1C0C012498D67CFD557E04D7CA263BD6CE8463496CD64A47FF2630453B164AAAD8DFEDB8A7BB89AC5F42B27EF676781C58906AD284CB25D970EA818848EFD5858C7B1C1A980663181E1AACBF4157E0A4E51D70636984FFE2C3052C0C70A983E4B903932593145C035189D8FFC54EA2C5955DDCF1AC48B66D0FAAE3A1F0C95

n = 19031977752053775433158924809140507039206404056424472273271188622157774199761631419592404130966729647526025764855138143073715356222955599247210922596791041047396376800139899774613720366922970272401903672933132635748592388016979721546356471020426013276329766039465318759029041086060680919505183730373784025075897893645848757498217337125191021543236168829229926869502668436749343510362317250166878453465538574128620807868941261042402239121539746440469968488061971193624777552817739359519167579901665112699695985350559979496219258864140146874900717281006959139268639863726956826644846228002118657899280178882607824440469
e = 65537

'''
https://news.ycombinator.com/item?id=3591429
Posting what I said in the other thread: As far as I can tell, this is what they're doing: if two different keys have a factor in common (i.e. A=PQ, B=PR), then you
can use Euclid's algorithm (which just requires repeated subtraction, and is thus really easy) to find P (=gcd(A,B)), and then just use division to find Q (=A/P) and R (=B/P) easily.
So what the researchers did, apparently, was to gather all the RSA public keys they could find (6 million or so) and then calculate the gcds of all pairs of keys.
Whenever they found a gcd that wasn't equal to 1, they'd cracked (at least) 2 keys.
'''

for filename in glob('*pubkeyRSA_RW*.pem'):
    f = open(filename)
    key = importKey(f.read())
    if gcd(n, key.n) != 1:
        print (f.name)
        print ("key.n = " + str(key.n))
        p = gcd(n, key.n)
        break
        
print ("p = " + str(p))
d = int(input("d = "))
privateKey = RSA.construct((n,e,d))
f = open('key.pem', 'wb')
f.write(privateKey.exportKey('PEM'))
f.close
print("The private key has been generated")

'''
Output
------
aleix.hernandez.miro_pubkeyRSA_RW.pem
key.n = 21523931013342401652842938957596747457699610236938195088163200447184078446871993222421932025795187603685254659707888078292791568333856403598825965577701580839430095442953169140535787939643049283363716882521639968537890300769825728113795868438629670176793677845218183722426145672366611291787250774378685490717592923564958561572689181978128315778214891316140213761078883060685258872688610559070549053950701328289073685619035043755160783069203774100973200178042509981282144598525919547913392550502976991995432339552413697356330653874092449517736376748717581201735571246403846586625181507376212810991572162573343658925203
p = 162851438319095962189512328276103333095773120523751003909247312278022583356963641529494922470801320621149211612180884303715353058613781092724718370167765955388455770024521348400224054063255730480291929405321387808134296568724811267689470602963297569830667091796821308032563016360068603765487369895076137467313
d = 6679501964920409672979972069747483137903573549320525607786603132554907370931188249111874016454304417699103080968506834747372124273070200623847573594287055176940721466957868604237151260503154542251189196654332419165561034480958093524081742983975750055218593293463872267214351801585085094367132016758890494846640731881315941283033588020328795052228942503257143775382560481030660161428103839387350243694396426688877119350391494827059101834096350543344333858159650529556085517777933563008831995072297566115545591345687917647976002568742492212999874720549918111762095561546005543256452940588942321490633537757880950165185
The private key has been generated
'''

'''
SageMath
--------
Modulus = "96C326607D51A67E4A2C586A067163501E4BBA1E8CB1825AE9EDEEDAD6523F798A8F2CB329AE2F9FD5576FDF52206477B2592C36C2B7B1BE3E7B302EBBD892164E435AF5FB5B9B077DFEA0531ADB8026A28D003C087DEB2B7B6BCEA73923884989ECC0432B2A694630DC210A2397D97B5FC4E6C05639B1BA66621E138C54DF4D9BC1C0C012498D67CFD557E04D7CA263BD6CE8463496CD64A47FF2630453B164AAAD8DFEDB8A7BB89AC5F42B27EF676781C58906AD284CB25D970EA818848EFD5858C7B1C1A980663181E1AACBF4157E0A4E51D70636984FFE2C3052C0C70A983E4B903932593145C035189D8FFC54EA2C5955DDCF1AC48B66D0FAAE3A1F0C95"
n = long(Modulus,16)
n
p = long(162851438319095962189512328276103333095773120523751003909247312278022583356963641529494922470801320621149211612180884303715353058613781092724718370167765955388455770024521348400224054063255730480291929405321387808134296568724811267689470602963297569830667091796821308032563016360068603765487369895076137467313)
q = n/p
q
e = long(65537)
# n = p * q => fiDeN = (p-1) * (q-1)
fiDeN = (p-1)*(q-1)
d = long(inverse_mod(e,fiDeN))
d

19031977752053775433158924809140507039206404056424472273271188622157774199761631419592404130966729647526025764855138143073715356222955599247210922596791041047396376800139899774613720366922970272401903672933132635748592388016979721546356471020426013276329766039465318759029041086060680919505183730373784025075897893645848757498217337125191021543236168829229926869502668436749343510362317250166878453465538574128620807868941261042402239121539746440469968488061971193624777552817739359519167579901665112699695985350559979496219258864140146874900717281006959139268639863726956826644846228002118657899280178882607824440469L
116867114890087436372494242230850502739491189947711815889196688781291145712642799458270756724068212339307613348773445888681566428946028581554318938284231030353309019060665864737924332714059763050041357800707960024444108404381175694017351214338605994004189161780986990791833823903364217712261129319767510155813L
6679501964920409672979972069747483137903573549320525607786603132554907370931188249111874016454304417699103080968506834747372124273070200623847573594287055176940721466957868604237151260503154542251189196654332419165561034480958093524081742983975750055218593293463872267214351801585085094367132016758890494846640731881315941283033588020328795052228942503257143775382560481030660161428103839387350243694396426688877119350391494827059101834096350543344333858159650529556085517777933563008831995072297566115545591345687917647976002568742492212999874720549918111762095561546005543256452940588942321490633537757880950165185L
'''

#openssl rsautl -decrypt -inkey key.pem -in daniel.garcia.romero_RSA_RW.enc -out descifrado.txt
#daniel.garcia.romero 04_18_13_02_03_061699
