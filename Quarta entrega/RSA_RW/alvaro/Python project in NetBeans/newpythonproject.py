from Crypto.PublicKey import RSA
from Crypto.PublicKey.RSA import importKey
from fractions import gcd
from glob import glob

#openssl rsa -in alvaro.martinez.arroyo_pubkeyRSA_RW.pem -pubin -text -modulus > salida.txt
#Modulus=BA43F3B6A80C95A10FAF8FC4D8242861D69F4121CD94BDDBB89AA0FCEA28658C7AA59F025B81FF8F50C59F8AC00239061499BA42D49747F8CBE7EFBC857C9C555337113F8CE67834603FA8B3368F559C9378ACF2BD33949E9488FD53DFA45A68BBF79538574797053DDA6B1CF6179854A1673A80F1CB1CA6CD1228A8D49B9598E8A0A56F7929F82A3579163CFB30C770917E5045158CA39862A0EDE514625368054E641495D534944E497C169F6291BB1793B1466D778BFBD3384718C6955D5F69DB03023071DBEA5E8BD6B19A373CF4919DA63BEE5716B2787BD227EF6FB2540FBE7FA4071E3F61A71B8CF19501CF8898E65DCA3EBB3B12180465C7CD4D1F69

n = 23513833106654023389225415529650408265405795225583628678946169898238562558758547077112631605295281287022484932707004581446318241106073434400070117947143436737724225694579019761933201705808572450519493775854126837041423183670933586148991592338356203365179685244816022615460866156243584938990744456542548175556696309454592466969637474190220980527428951731164712415471714998841204856918735333203957318814129131008333618012735923923474725949647471139731557158510615188970141545766279946198162396784782160110954498995637545543512855774614248351254486706645017790110640317465122637876520261323437797936868497646827894284137
e = 65537

'''
https://news.ycombinator.com/item?id=3591429
Posting what I said in the other thread: As far as I can tell, this is what they're doing: if two different keys have a factor in common (i.e. A=PQ, B=PR), then you
can use Euclid's algorithm (which just requires repeated subtraction, and is thus really easy) to find P (=gcd(A,B)), and then just use division to find Q (=A/P) and R (=B/P) easily.
So what the researchers did, apparently, was to gather all the RSA public keys they could find (6 million or so) and then calculate the gcds of all pairs of keys.
Whenever they found a gcd that wasn't equal to 1, they'd cracked (at least) 2 keys.
'''

for filename in glob('*pubkeyRSA_RW*.pem'):
    f = open(filename)
    key = importKey(f.read())
    if gcd(n, key.n) != 1:
        print (f.name)
        print ("key.n = " + str(key.n))
        p = gcd(n, key.n)
        break
        
print ("p = " + str(p))
d = int(input("d = "))
privateKey = RSA.construct((n,e,d))
f = open('key.pem', 'wb')
f.write(privateKey.exportKey('PEM'))
f.close
print("The private key has been generated")

'''
Output
------
alex.miro_pubkeyRSA_RW.pem
key.n = 27913245685374630914184399225493760194320462024264002922071286162820878107668477145513877793421273912442311912222989831623774487876108876488411688096346039438856990928708974867970163694007048686116418983528909647605773227262804665956027186298245178213439550103525968033194685487828445560783664985125684125862212221934498333326600183756860153330754806943883903554487791139049362003350813900429355328702386862829728110617398941676534419310456807402233218083258133548847557984039876792164879392277625687270871282106213262365546089732259094131053338969506646016806044178151842040064827707833163455733559092311200767516077
p = 172629719759692458564170556294635407638181205389001307025870076696685664738396565153012358693619712429124480466642657143257735536905919999950895481255721287068506703899503182698598941131995472046595691245050670055048587718159513196331901313667037595906881371787769162789348999396545175203351612157633165332599
d = 19622068947356585427418679147910048187055296105820660885477913724074446287417869900167688824535742154618912995250714566722601654120438166643878034553447282530267450497223348502069469174522343520742650939186447300270006773501432134923605752246588961381230098815005085323398305843797574809854033817970184166519352895908113505943217573655344807045343708254591166879275692397794576596555381343157727230287011159955573285069765344461011312055097541549323353830163474726703391400045792412474235472878821412975378546033865565680882375702698155527863644933362631386263369621286930525035840707531145101665866869955873820055593
The private key has been generated
'''

'''
SageMath
--------
Modulus = "BA43F3B6A80C95A10FAF8FC4D8242861D69F4121CD94BDDBB89AA0FCEA28658C7AA59F025B81FF8F50C59F8AC00239061499BA42D49747F8CBE7EFBC857C9C555337113F8CE67834603FA8B3368F559C9378ACF2BD33949E9488FD53DFA45A68BBF79538574797053DDA6B1CF6179854A1673A80F1CB1CA6CD1228A8D49B9598E8A0A56F7929F82A3579163CFB30C770917E5045158CA39862A0EDE514625368054E641495D534944E497C169F6291BB1793B1466D778BFBD3384718C6955D5F69DB03023071DBEA5E8BD6B19A373CF4919DA63BEE5716B2787BD227EF6FB2540FBE7FA4071E3F61A71B8CF19501CF8898E65DCA3EBB3B12180465C7CD4D1F69"
n = long(Modulus,16)
n
p = long(172629719759692458564170556294635407638181205389001307025870076696685664738396565153012358693619712429124480466642657143257735536905919999950895481255721287068506703899503182698598941131995472046595691245050670055048587718159513196331901313667037595906881371787769162789348999396545175203351612157633165332599)
q = n/p
q
e = long(65537)
# n = p * q => fiDeN = (p-1) * (q-1)
fiDeN = (p-1)*(q-1)
d = long(inverse_mod(e,fiDeN))
d

23513833106654023389225415529650408265405795225583628678946169898238562558758547077112631605295281287022484932707004581446318241106073434400070117947143436737724225694579019761933201705808572450519493775854126837041423183670933586148991592338356203365179685244816022615460866156243584938990744456542548175556696309454592466969637474190220980527428951731164712415471714998841204856918735333203957318814129131008333618012735923923474725949647471139731557158510615188970141545766279946198162396784782160110954498995637545543512855774614248351254486706645017790110640317465122637876520261323437797936868497646827894284137L
136209646516174785334592267125602400268177585912092462128583033787174770742232586179890480484015536882218711807983715126508847093031776400010966303924785231871278978184182187958807006831076705578211728368223599240009555011515458891810504610425653019920664140954706449684467066471258018091426612015102526629663L
19622068947356585427418679147910048187055296105820660885477913724074446287417869900167688824535742154618912995250714566722601654120438166643878034553447282530267450497223348502069469174522343520742650939186447300270006773501432134923605752246588961381230098815005085323398305843797574809854033817970184166519352895908113505943217573655344807045343708254591166879275692397794576596555381343157727230287011159955573285069765344461011312055097541549323353830163474726703391400045792412474235472878821412975378546033865565680882375702698155527863644933362631386263369621286930525035840707531145101665866869955873820055593L
'''

#openssl rsautl -decrypt -inkey key.pem -in alvaro.martinez.arroyo_RSA_RW.enc -out descifrado.txt
#alvaro.martinez.arroyo 04_18_13_02_03_350665
